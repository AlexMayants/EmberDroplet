0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.27
3 info using node@v0.10.31
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/atimberlake/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball /Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz
13 verbose folder .
14 info prepublish ember-droplet@0.6.1
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/atimberlake/.npm/1f1177db-tar.lock
17 silly lockFile 8f57ded5--ember-droplet-0-6-1-package-tgz tar:///Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz
18 verbose lock tar:///Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz /Users/atimberlake/.npm/8f57ded5--ember-droplet-0-6-1-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 8f57ded5--ember-droplet-0-6-1-package-tgz tar:///Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz
22 silly lockFile 8f57ded5--ember-droplet-0-6-1-package-tgz tar:///Users/atimberlake/.npm/ember-droplet/0.6.1/package.tgz
23 silly lockFile ebf9c5b4--npm-ember-droplet-0-6-1-package /Users/atimberlake/.npm/ember-droplet/0.6.1/package
24 verbose lock /Users/atimberlake/.npm/ember-droplet/0.6.1/package /Users/atimberlake/.npm/ebf9c5b4--npm-ember-droplet-0-6-1-package.lock
25 silly lockFile ebf9c5b4--npm-ember-droplet-0-6-1-package /Users/atimberlake/.npm/ember-droplet/0.6.1/package
26 silly lockFile ebf9c5b4--npm-ember-droplet-0-6-1-package /Users/atimberlake/.npm/ember-droplet/0.6.1/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'ember-droplet',
29 silly publish   version: '0.6.1',
29 silly publish   author: { name: 'Adam Timberlake' },
29 silly publish   dependencies:
29 silly publish    { bower: '^1.3.10',
29 silly publish      express: '^3.17.1',
29 silly publish      grunt: '~0.4.1',
29 silly publish      'grunt-cli': '~0.1.13',
29 silly publish      'grunt-contrib-concat': '^0.3.0',
29 silly publish      'grunt-contrib-copy': '~0.5.0',
29 silly publish      'grunt-contrib-jasmine': '^0.7.0',
29 silly publish      'grunt-contrib-jshint': '^0.6.5',
29 silly publish      'grunt-contrib-uglify': '^0.2.7',
29 silly publish      'grunt-contrib-yuidoc': '^0.4.0',
29 silly publish      'promised-io': '~0.3.4' },
29 silly publish   devDependencies: { grunt: '~0.4.1' },
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'git://github.com:Wildhoney/EmberDroplet.git' },
29 silly publish   description: 'Ember HTML5 file uploading with drag & drop and image/file preview.',
29 silly publish   bugs: { url: 'https://github.com/Wildhoney/EmberDroplet/issues' },
29 silly publish   main: 'Gruntfile.js',
29 silly publish   directories: { doc: 'docs', example: 'example', test: 'tests' },
29 silly publish   scripts:
29 silly publish    { test: 'grunt test',
29 silly publish      start: 'node example/node-server/server.js',
29 silly publish      postinstall: 'node_modules/bower/bin/bower install && node_modules/grunt-cli/bin/grunt build' },
29 silly publish   keywords:
29 silly publish    [ 'HTML5 drag and drop',
29 silly publish      'HTML5 drag & drop',
29 silly publish      'drag and drop',
29 silly publish      'drag & drop',
29 silly publish      'ember image upload',
29 silly publish      'ember drag and drop',
29 silly publish      'ember drag & drop' ],
29 silly publish   license: 'MIT',
29 silly publish   readme: 'Ember Droplet\n=============\n\n[![Build Status](https://travis-ci.org/Wildhoney/EmberDroplet.svg?branch=master)](https://travis-ci.org/Wildhoney/EmberDroplet)\n&nbsp;\n[![NPM version](https://badge.fury.io/js/ember-droplet.svg)](http://badge.fury.io/js/ember-droplet)\n\n**Demo**: http://droplet.wildhoney.io/\n\nInstall via npm: `npm install ember-droplet`.\n\n[See this comment](https://github.com/Wildhoney/EmberDroplet/issues/36#issuecomment-50809709) for installing for Ember CLI.\n\nEmber Droplet allows HTML5 drag and drop functionality in Ember straight out-of-the-box. Its philosophy is that it doesn\'t\nimpose anything, and instead allows each individual developer to decide how it should work. I\'ve provided a view &ndash; `DropletView`\nthat you\'re free to use in your views. However, most of the functionality exists in the controller mixin &ndash; `DropletController`).\n\nFor the time being, please refer to the example.\n\n<img src="http://i.imgur.com/D07KQOl.png" alt="EmberDroplet Screenshot" />\n\nFeatures\n-------------\n\n * Upload with HTML5\'s drag and drop;\n * MIME type restrictions on permitted file types;\n * Instant image previews upon dropping;\n * Specifies extension in class name to allow for icons for different file types;\n * Allows the deletion of files before they\'re uploaded;\n * Keeps a track of all files &ndash; even invalid files;\n\nMethods\n-------------\n\nThe `DropletController` exposes the following public methods:\n\n * `addValidFile` &ndash; Adds a file that is allowed by its MIME type;\n * `addInvalidFile` &ndash; Same as above, but a file that isn\'t allowed by its MIME type;\n * `deleteFile` &ndash; Deletes a specified file by its object;\n * `clearAllFiles` &ndash; Clears all files, including uploaded files;\n * `uploadAllFiles` &ndash; Uploads all valid files &ndash; returns a <a href="http://api.jquery.com/deferred.promise/" target="_blank">jQuery promise</a>;\n\nIn addition to the methods, `DropletController` also has the following computed properties for convenience:\n\n * `validFiles` &ndash; Provides a list of valid files;\n * `invalidFiles` &ndash; Provides a list of invalid files;\n * `uploadedFiles` &ndash; All uploaded files;\n * `deletedFiles` &ndash; All deleted files;\n\nAdditional computed properties can be added to your controller that implements the mixin. To add additional computed properties,\nplease refer to the protected `_filesByProperties` method in the mixin.\n\nGetting Started\n-------------\n\nIn order to begin using EmberDroplet, you need a controller. Within your controller you can implement the `DropletController` mixin, which will give you access to all methods defined in it.\n\n```javascript\nApp.IndexController = Ember.Controller.extend(DropletController, {\n\n});\n```\n\nProperties that can be defined in your controller to interact with the mixin are as follows:\n\n * `dropletUrl`: URL in which the Node.js <em>(default)</em> or Apache/Nginx server is running on;\n * `useArray`: For Ruby/PHP scripts you need to specify an array-like name &ndash; set to `true` for those cases;\n * `mimeTypes`: Enumeration of valid MIME types. Can be appended using `concatenatedProperties` (see example);\n\nNow that your controller is using the mixin, it\'s time for your view to interact with your controller and its related mixin. For this we recommend using the in-built view, but it\'s not essential. In order to create your own, please refer to the example. The simplest way to use the in-built view is to embed it into your template.\n\n```javascript\nApp.IndexView = Ember.View.extend({\n\n    /**\n     * @property DragDrop\n     * @type DropletView\n     */\n    DragDrop: DropletView.extend()\n\n});\n```\n\nOnce you have the property `DragDrop` defined, the view and all of its related functionality can be output into the DOM using `{{view.DragDrop}}`. It\'s worth bearing in mind that this view is quite abstract in order to be customisable &ndash; see index.html for an example.\n\nExample\n-------------\n\nThe example uses the Node.js server to upload files, which is available in `example/node-server`. Simply run: `node server` to create it.\n\n<h3>Vagrant</h3>\n\nAs an alternative, if you have Vagrant installed then you can simply issue the `vagrant up` command and the Node.js server will be available on port 8889.\n\nView Mixin\n-------------\n\nIn order to use `EmberDroplet` it\'s not necessary for you to implement the `DropletView` mixin into your view. However, if you don\'t, then you\'ll need to communicate with the `DropletController` mixin yourself.\n\nThere is also `DropletPreview` which allows image uploads to be previewed immediately.\n\nTesting\n-------------\n\nAll of the related tests are written in Jasmine, and can be run with `grunt test` (assuming you have `grunt` installed &ndash; `npm install grunt -g`). You\'ll also need to run `npm install` to install the project\'s dependencies.\n\n<img src="http://pivotal.github.io/jasmine/images/jasmine_logo.png" alt="Jasmine" />',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '63b1f02f657ca8fc1b4d443c5ee7ecce123abd71',
29 silly publish   homepage: 'https://github.com/Wildhoney/EmberDroplet',
29 silly publish   _id: 'ember-droplet@0.6.1',
29 silly publish   _shasum: 'a286c28bd77f286731b0ccefc728851eccb2dfaf',
29 silly publish   _from: '.' }
30 verbose request where is /ember-droplet
31 verbose request registry https://registry.npmjs.org/
32 verbose request id b9fb46c0ae553c2a
33 verbose url raw /ember-droplet
34 verbose url resolving [ 'https://registry.npmjs.org/', './ember-droplet' ]
35 verbose url resolved https://registry.npmjs.org/ember-droplet
36 verbose request where is https://registry.npmjs.org/ember-droplet
37 info trying registry request attempt 1 at 14:36:58
38 http PUT https://registry.npmjs.org/ember-droplet
39 http 403 https://registry.npmjs.org/ember-droplet
40 verbose headers { date: 'Sat, 20 Sep 2014 13:37:28 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '9261',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-ams4132-AMS',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1411220219.686628,VS0,VE28885',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.6.1
42 error old={"name":"ember-droplet","version":"0.6.1","author":{"name":"Adam Timberlake"},"dependencies":{"bower":"^1.3.10","express":"^3.17.1","grunt":"~0.4.1","grunt-cli":"~0.1.13","grunt-contrib-concat":"^0.3.0","grunt-contrib-copy":"~0.5.0","grunt-contrib-jasmine":"^0.7.0","grunt-contrib-jshint":"^0.6.5","grunt-contrib-uglify":"^0.2.7","grunt-contrib-yuidoc":"^0.4.0","promised-io":"~0.3.4"},"devDependencies":{"grunt":"~0.4.1"},"repository":{"type":"git","url":"git://github.com:Wildhoney/EmberDroplet.git"},"description":"Ember HTML5 file uploading with drag & drop and image/file preview.","bugs":{"url":"https://github.com/Wildhoney/EmberDroplet/issues"},"main":"Gruntfile.js","directories":{"doc":"docs","example":"example","test":"tests"},"scripts":{"test":"grunt test","start":"node example/node-server/server.js","postinstall":"node_modules/bower/bin/bower install && node_modules/grunt-cli/bin/grunt build"},"keywords":["HTML5 drag and drop","HTML5 drag & drop","drag and drop","drag & drop","ember image upload","ember drag and drop","ember drag & drop"],"license":"MIT","gitHead":"63b1f02f657ca8fc1b4d443c5ee7ecce123abd71","homepage":"https://github.com/Wildhoney/EmberDroplet","_id":"ember-droplet@0.6.1","_shasum":"a286c28bd77f286731b0ccefc728851eccb2dfaf","_from":".","_npmVersion":"1.4.27","_npmUser":{"name":"wildhoney","email":"adam.timberlake@gmail.com"},"maintainers":[{"name":"wildhoney","email":"adam.timberlake@gmail.com"}],"dist":{"shasum":"a286c28bd77f286731b0ccefc728851eccb2dfaf","tarball":"http://registry.npmjs.org/ember-droplet/-/ember-droplet-0.6.1.tgz"}}
42 error new={"name":"ember-droplet","version":"0.6.1","author":{"name":"Adam Timberlake"},"dependencies":{"bower":"^1.3.10","express":"^3.17.1","grunt":"~0.4.1","grunt-cli":"~0.1.13","grunt-contrib-concat":"^0.3.0","grunt-contrib-copy":"~0.5.0","grunt-contrib-jasmine":"^0.7.0","grunt-contrib-jshint":"^0.6.5","grunt-contrib-uglify":"^0.2.7","grunt-contrib-yuidoc":"^0.4.0","promised-io":"~0.3.4"},"devDependencies":{"grunt":"~0.4.1"},"repository":{"type":"git","url":"git://github.com:Wildhoney/EmberDroplet.git"},"description":"Ember HTML5 file uploading with drag & drop and image/file preview.","bugs":{"url":"https://github.com/Wildhoney/EmberDroplet/issues"},"main":"Gruntfile.js","directories":{"doc":"docs","example":"example","test":"tests"},"scripts":{"test":"grunt test","start":"node example/node-server/server.js","postinstall":"node_modules/bower/bin/bower install && node_modules/grunt-cli/bin/grunt build"},"keywords":["HTML5 drag and drop","HTML5 drag & drop","drag and drop","drag & drop","ember image upload","ember drag and drop","ember drag & drop"],"license":"MIT","readme":"Ember Droplet\u000a=============\u000a\u000a[![Build Status](https://travis-ci.org/Wildhoney/EmberDroplet.svg?branch=master)](https://travis-ci.org/Wildhoney/EmberDroplet)\u000a&nbsp;\u000a[![NPM version](https://badge.fury.io/js/ember-droplet.svg)](http://badge.fury.io/js/ember-droplet)\u000a\u000a**Demo**: http://droplet.wildhoney.io/\u000a\u000aInstall via npm: `npm install ember-droplet`.\u000a\u000a[See this comment](https://github.com/Wildhoney/EmberDroplet/issues/36#issuecomment-50809709) for installing for Ember CLI.\u000a\u000aEmber Droplet allows HTML5 drag and drop functionality in Ember straight out-of-the-box. Its philosophy is that it doesn't\u000aimpose anything, and instead allows each individual developer to decide how it should work. I've provided a view &ndash; `DropletView`\u000athat you're free to use in your views. However, most of the functionality exists in the controller mixin &ndash; `DropletController`).\u000a\u000aFor the time being, please refer to the example.\u000a\u000a<img src=\"http://i.imgur.com/D07KQOl.png\" alt=\"EmberDroplet Screenshot\" />\u000a\u000aFeatures\u000a-------------\u000a\u000a * Upload with HTML5's drag and drop;\u000a * MIME type restrictions on permitted file types;\u000a * Instant image previews upon dropping;\u000a * Specifies extension in class name to allow for icons for different file types;\u000a * Allows the deletion of files before they're uploaded;\u000a * Keeps a track of all files &ndash; even invalid files;\u000a\u000aMethods\u000a-------------\u000a\u000aThe `DropletController` exposes the following public methods:\u000a\u000a * `addValidFile` &ndash; Adds a file that is allowed by its MIME type;\u000a * `addInvalidFile` &ndash; Same as above, but a file that isn't allowed by its MIME type;\u000a * `deleteFile` &ndash; Deletes a specified file by its object;\u000a * `clearAllFiles` &ndash; Clears all files, including uploaded files;\u000a * `uploadAllFiles` &ndash; Uploads all valid files &ndash; returns a <a href=\"http://api.jquery.com/deferred.promise/\" target=\"_blank\">jQuery promise</a>;\u000a\u000aIn addition to the methods, `DropletController` also has the following computed properties for convenience:\u000a\u000a * `validFiles` &ndash; Provides a list of valid files;\u000a * `invalidFiles` &ndash; Provides a list of invalid files;\u000a * `uploadedFiles` &ndash; All uploaded files;\u000a * `deletedFiles` &ndash; All deleted files;\u000a\u000aAdditional computed properties can be added to your controller that implements the mixin. To add additional computed properties,\u000aplease refer to the protected `_filesByProperties` method in the mixin.\u000a\u000aGetting Started\u000a-------------\u000a\u000aIn order to begin using EmberDroplet, you need a controller. Within your controller you can implement the `DropletController` mixin, which will give you access to all methods defined in it.\u000a\u000a```javascript\u000aApp.IndexController = Ember.Controller.extend(DropletController, {\u000a\u000a});\u000a```\u000a\u000aProperties that can be defined in your controller to interact with the mixin are as follows:\u000a\u000a * `dropletUrl`: URL in which the Node.js <em>(default)</em> or Apache/Nginx server is running on;\u000a * `useArray`: For Ruby/PHP scripts you need to specify an array-like name &ndash; set to `true` for those cases;\u000a * `mimeTypes`: Enumeration of valid MIME types. Can be appended using `concatenatedProperties` (see example);\u000a\u000aNow that your controller is using the mixin, it's time for your view to interact with your controller and its related mixin. For this we recommend using the in-built view, but it's not essential. In order to create your own, please refer to the example. The simplest way to use the in-built view is to embed it into your template.\u000a\u000a```javascript\u000aApp.IndexView = Ember.View.extend({\u000a\u000a    /**\u000a     * @property DragDrop\u000a     * @type DropletView\u000a     */\u000a    DragDrop: DropletView.extend()\u000a\u000a});\u000a```\u000a\u000aOnce you have the property `DragDrop` defined, the view and all of its related functionality can be output into the DOM using `{{view.DragDrop}}`. It's worth bearing in mind that this view is quite abstract in order to be customisable &ndash; see index.html for an example.\u000a\u000aExample\u000a-------------\u000a\u000aThe example uses the Node.js server to upload files, which is available in `example/node-server`. Simply run: `node server` to create it.\u000a\u000a<h3>Vagrant</h3>\u000a\u000aAs an alternative, if you have Vagrant installed then you can simply issue the `vagrant up` command and the Node.js server will be available on port 8889.\u000a\u000aView Mixin\u000a-------------\u000a\u000aIn order to use `EmberDroplet` it's not necessary for you to implement the `DropletView` mixin into your view. However, if you don't, then you'll need to communicate with the `DropletController` mixin yourself.\u000a\u000aThere is also `DropletPreview` which allows image uploads to be previewed immediately.\u000a\u000aTesting\u000a-------------\u000a\u000aAll of the related tests are written in Jasmine, and can be run with `grunt test` (assuming you have `grunt` installed &ndash; `npm install grunt -g`). You'll also need to run `npm install` to install the project's dependencies.\u000a\u000a<img src=\"http://pivotal.github.io/jasmine/images/jasmine_logo.png\" alt=\"Jasmine\" />","readmeFilename":"README.md","gitHead":"63b1f02f657ca8fc1b4d443c5ee7ecce123abd71","homepage":"https://github.com/Wildhoney/EmberDroplet","_id":"ember-droplet@0.6.1","_shasum":"a286c28bd77f286731b0ccefc728851eccb2dfaf","_from":".","_npmVersion":"1.4.27","_npmUser":{"name":"wildhoney","email":"adam.timberlake@gmail.com"},"maintainers":[{"name":"wildhoney","email":"adam.timberlake@gmail.com"}],"dist":{"shasum":"a286c28bd77f286731b0ccefc728851eccb2dfaf","tarball":"http://registry.npmjs.org/ember-droplet/-/ember-droplet-0.6.1.tgz"}}: ember-droplet
42 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Darwin 13.2.0
45 error command "node" "/usr/local/bin/npm" "publish"
46 error cwd /Users/atimberlake/Webroot/EmberDroplet
47 error node -v v0.10.31
48 error npm -v 1.4.27
49 verbose exit [ 1, true ]
